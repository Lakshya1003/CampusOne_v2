package com.example.yourprojectname\n\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Lock\nimport androidx.compose.material.icons.filled.Visibility\nimport androidx.compose.material.icons.filled.VisibilityOff\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.input.KeyboardType\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\nimport androidx.compose.ui.text.input.VisualTransformation\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport com.example.yourprojectname.ui.theme.YourProjectNameTheme\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun LoginPage(onLoginClick: (String, String) -> Unit, onForgotPasswordClick: () -> Unit) {\n    var email by remember { mutableStateOf(\"\") }\n    var password by remember { mutableStateOf(\"\") }\n    var showPassword by remember { mutableStateOf(false) }\n    var isLoading by remember { mutableStateOf(false) } // Simulate loading state\n\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(24.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\n            text = \"Sign In\",\n            style = MaterialTheme.typography.headlineLarge,\n            modifier = Modifier.padding(bottom = 32.dp)\n        )\n\n        OutlinedTextField(\n            value = email,\n            onValueChange = { email = it },\n            label = { Text(\"Email\") },\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),\n            modifier = Modifier.fillMaxWidth()\n        )\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        OutlinedTextField(\n            value = password,\n            onValueChange = { password = it },\n            label = { Text(\"Password\") },\n            visualTransformation = if (showPassword) VisualTransformation.None else PasswordVisualTransformation(),\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),\n            trailingIcon = {\n                val image = if (showPassword)\n                    Icons.Filled.Visibility\n                else Icons.Filled.VisibilityOff\n                IconButton(onClick = { showPassword = !showPassword }) {\n                    Icon(imageVector = image, contentDescription = if (showPassword) \"Hide password\" else \"Show password\")\n                }\n            },\n            leadingIcon = {\n                Icon(imageVector = Icons.Filled.Lock, contentDescription = \"Password icon\")\n            },\n            modifier = Modifier.fillMaxWidth()\n        )\n\n        Spacer(modifier = Modifier.height(24.dp))\n\n        Button(\n            onClick = {\n                isLoading = true\n                // Simulate API call\n                // In a real app, you'd call your actual login function here\n                onLoginClick(email, password)\n                // Assuming login is quick for this example, reset loading after a delay\n                // In a real app, isLoading would be set to false after API response\n                // Handler(Looper.getMainLooper()).postDelayed({ isLoading = false }, 1000)\n            },\n            modifier = Modifier.fillMaxWidth().height(50.dp),\n            enabled = !isLoading\n        ) {\n            if (isLoading) {\n                CircularProgressIndicator(color = MaterialTheme.colorScheme.onPrimary, modifier = Modifier.size(24.dp))\n            } else {\n                Text(\"Sign In\", style = MaterialTheme.typography.titleMedium)\n            }\n        }\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        Text(\n            text = \"Forgot your password?\",\n            color = MaterialTheme.colorScheme.primary,\n            modifier = Modifier.clickable { onForgotPasswordClick() }\n        )\n    }\n}\n\n@Preview(showBackground = true)\n@Composable\nfun PreviewLoginPage() {\n    YourProjectNameTheme {\n        LoginPage(onLoginClick = { email, pass ->\n            println(\"Login attempt with: \$email / \$pass\")\n        }, onForgotPasswordClick = {\n            println(\"Forgot password clicked!\")\n        })\n    }\n}\n